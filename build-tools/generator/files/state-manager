interface REPLACE_WITH_PASCALState
{

}

class REPLACE_WITH_PASCAL
{
    private state : REPLACE_WITH_PASCALState;

    constructor()
    {
        this.state = {};
    }

    public getState() : REPLACE_WITH_PASCALState
    {
        return Object.assign({}, this.state);
    }

    private setState(updatedState:Partial<REPLACE_WITH_PASCALState>) : void
    {
        Object.keys(updatedState).forEach((key:string) => {
            // @ts-ignore
            if (this.state[key] !== null && this.state[key] !== undefined)
            {
                // @ts-ignore
                if (updatedState[key] !== this.state[key])
                {
                    // @ts-ignore
                    this.state[key] = updatedState[key];
                }
            }
            else
            {
                // @ts-ignore
                this.state[key] = updatedState[key];
            }
        });
        const newState = Object.assign({}, this.state);
        const updateEvent = new CustomEvent('REPLACE_WITH_CAMEL:update', {detail: { state: newState } });
        document.dispatchEvent(updateEvent);
    }
}

export const REPLACE_WITH_CAMEL:REPLACE_WITH_PASCAL = new REPLACE_WITH_PASCAL();